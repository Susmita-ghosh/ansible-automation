---
- name: Fetch all the resources
  block:
    - name: Fetch List of Resource Group
      azure.azcollection.azure_rm_subscription_info:
              all: true
              cloud_environment: "{{ cloud }}"
              client_id: "{{ client_id }}"
              secret: "{{ secret }}"
              subscription_id: "{{ subscription }}"
              tenant: "{{ tenant }}"
      register: sub_info
      
    - name: Getting the Subscription name, State
      set_fact:
          sub_dict: "{{ sub_dict | default([]) + [{'Name' : item.display_name, 'Status': item.state}] }}"
      with_items: "{{ sub_info.subscriptions }}"
      
    - name: Print the Sub Value
      debug:
        msg: "{{ sub_dict }}"
      
    - name: Get the Resource Group Info for Each Subscription
      azure_rm_resourcegroup_info:
            list_resources: true
      register: r_group
      
    - name: Setting the resources list
      set_fact:
          res_list: "{{ r_group.resourcegroups }}"
      when: r_group.failed == false
    - name: Fetch the Resources
      set_fact:
          resources: "{{ item['resources'] | list }}"
      with_items: "{{ res_list }}"
      when: res_list is defined
    - name: Debug
      debug:
        msg: "{{ resources }}"
      
    - name: Fetch the resource name, location and resource group
      set_fact:
        res_dict: "{{ res_dict | default([]) + [{'Name': item.name, 'Type': item.type, 'Id': item.id, 'Location': item.location,'RG':item.id.split('/subscriptions/dc6ee1af-2aea-4088-9e82-fb784c244e2c/resourceGroups/')[1].split('/providers/Microsoft.')[0]}]  }}"
      with_items: "{{ resources }}"
      when: resources is defined
    - name: Fetch Each Networking Configuration for Each Resource Group
      azure_rm_resource_info:
              resource_group: "{{ item.RG }}"
              provider: "{{ item.Type.split('Microsoft.')[1].split('/')[0] }}"
              resource_type: "{{ item.Type.split('Microsoft.')[1].split('/')[1] }}"
              resource_name: "{{ item.Name }}"
              api_version: 2023-09-01
              client_id: "{{ client_id }}"
              secret: "{{ secret }}"
              subscription_id: "{{ subscription }}"
              tenant: "{{ tenant }}"
      with_items: "{{ res_dict }}"
      when:
          - item.Type.split('Microsoft.')[1].split('/')[0] == 'Network'
          - item.Type.split('Microsoft.Network/')[1] != 'frontdoorWebApplicationFirewallPolicies'
          - res_dict is defined
      register: config_network
      
    - name: Network
      debug:
          msg: "{{ config_network }}"
    - name: Clean Network Configuration for Skipped values
      set_fact:
          config_network_mod: "{{ item.response }}"
      when: item.skipped is undefined
      with_items: "{{ config_network.results }}"
    - name: Fetch Compute Configuration for Each Resource Group
      azure.azcollection.azure_rm_resource_info:
              url: https://management.azure.com{{item.Id}}?api-version=2024-03-01
              client_id: "{{ client_id }}"
              secret: "{{ secret }}"
              subscription_id: "{{ subscription }}"
              tenant: "{{ tenant }}"
      when:
          - item.Type.split('Microsoft.')[1].split('/')[0] == 'Compute'
          - item.Type.split('Microsoft.Compute/')[1] != 'disks'
      with_items: "{{ res_dict }}"
      register: config_compute
  
    - name: Clean Compute Configuration for Skipped Values
      set_fact:
            config_compute_mod: "{{ item.response }}"
      when: item.skipped is undefined
      with_items: "{{ config_compute.results }}"
    - name: Fetch Disk Configuration for each Resource Group
      azure.azcollection.azure_rm_resource_info:
            url: https://management.azure.com{{item.Id}}?api-version=2023-10-02
            client_id: "{{ client_id }}"
            secret: "{{ secret }}"
            subscription_id: "{{ subscription }}"
            tenant: "{{ tenant }}"
      when:
            - item.Type.split('Microsoft.')[1].split('/')[0] == 'Compute'
            - item.Type.split('Microsoft.Compute/')[1] == 'disks'
      with_items: "{{ res_dict }}"

      register: config_disks
    - name: Clean Compute Disk Configuration for Skipped Values
      set_fact:
          config_disks_mod: "{{ item.response }}"
      when: item.skipped is undefined
      with_items: "{{ config_disks.results }}"
    - name: Fetch the WAF FrontDoor Policies
      azure.azcollection.azure_rm_resource_info:
          url: https://management.azure.com{{item.Id}}?api-version=2022-05-01
          client_id: "{{ client_id }}"
          secret: "{{ secret }}"
          subscription_id: "{{ subscription }}"
          tenant: "{{ tenant }}"
      when:
          - item.Type.split('Microsoft.')[1].split('/')[0] == 'Network'
          - item.Type.split('Microsoft.Network/')[1] == 'frontdoorWebApplicationFirewallPolicies'
      with_items: "{{ res_dict }}"
      register: config_fd_policies
    - name: Clean FrontDoor Firewall policy Configuration for Skipped Values
      set_fact:
          config_fd_mod: "{{ item.response }}"
      when: item.skipped is undefined
      with_items: "{{ config_fd_policies.results }}"
    - name: Fetch Storage Accounts Configuration for Each Resource Groups
      azure.azcollection.azure_rm_resource_info:
            url: https://management.azure.com{{item.Id}}?api-version=2023-01-01
            client_id: "{{ client_id }}"
            secret: "{{ secret }}"
            subscription_id: "{{ subscription }}"
            tenant: "{{ tenant }}"
      when:
          - item.Type.split('Microsoft.')[1].split('/')[0] == 'Storage'
      with_items: "{{ res_dict }}"
      register: config_storage
    - name: Clean Storage Configuration for Skipped Values
      set_fact:
          config_storage_mod: "{{ item.response }}"
      when: item.skipped is undefined
      with_items: "{{ config_storage.results }}"
    - name: Setting Output
      set_fact:
          result:
            storage: "{{ config_storage_mod }}"
            disks: "{{ config_disks_mod }}"
            Compute: "{{ config_compute_mod }}"
            Network: "{{ config_network_mod }}"
  rescue: 
      - name: Error Block
        set_fact: 
            error : "{{ ansible_failed_result.module_stderr.split('\nazure.core.exceptions.')[1] }}"
        when: ansible_failed_result.module_stderr.split('\nazure.core.exceptions.')[1] is defined
      - name: Other Error
        set_fact:
          error : ansible_failed_result.msg
        when: ansible_failed_result.module_stderr.split('\nazure.core.exceptions.')[1] is undefined
  always: 
    - name: Send Success Result
      ansible.builtin.uri:
        url: http://localhost/microservice/ansible/incident/playbook/result_update?incident_id={{ incident_id }}
        method: POST
        body_format: json
        headers: 
            Content-Type: application/json
            Authorization: Bearer {{ token }}
        body: 
          playbook_result: "{{ result }}"
          status: completed
      when: 
        - result is defined
        - error is undefined
    - name: Send Failed Result
      ansible.builtin.uri:
        url: http://localhost/microservice/ansible/incident/playbook/result_update?incident_id={{ incident_id }}
        method: POST
        body_format: json
        headers: 
            Content-Type: application/json
            Authorization: Bearer {{ token }}
        body: 
          playbook_result: "{{ error }}"
          status: completed
      when: 
        - result is undefined
        - error is defined
  

