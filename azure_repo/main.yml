---
- name: Fetch Azure Resources from Each Subscription
  hosts: localhost
  connection: local
  gather_facts: False

  vars:
    cloud: "AzureCloud"
    client_id: ""
    secret: ""
    subscription: ""
    tenant: ""
  
  tasks: 
  # Get the List of Resource Group
     - name: Fetch List of Resource Group
       azure.azcollection.azure_rm_subscription_info:
              all: true
              cloud_environment: "{{ cloud }}"
              client_id: "{{ client_id }}"
              secret: "{{ secret }}"
              subscription_id: "{{ subscription }}"
              tenant: "{{ tenant }}"
       register: sub_info
  #Get List of Subscription
     - name: Getting the Subscription name, State
       set_fact:
           sub_dict: "{{ sub_dict | default([]) + [{'Name' : item.display_name, 'Status': item.state}] }}"
       with_items: "{{ sub_info.subscriptions }}"
     - name: Print the Sub Value
       debug: 
         msg: "{{ sub_dict }}"
     - name: Get the Resource Group Info for Each Subscription
       azure_rm_resourcegroup_info:
             list_resources: true
       register: r_group
     - name: Setting the resources list
       set_fact:
           res_list: "{{ r_group.resourcegroups }}"
     - name: Fetch the Resources
       set_fact:
          resources: "{{ item['resources'] | list }}"
       with_items: "{{ res_list }}"
     - name: Debug
       debug:
         msg: "{{ resources }}"
    # Structuring the Data based on Resource Name, Location and Resource Group
     - name: Fetch the resource name, location and resource group
       set_fact:
         res_dict: "{{ res_dict | default([]) + [{'Name': item.name, 'Type': item.type, 'Id': item.id, 'Location': item.location,'RG':item.id.split('/subscriptions/dc6ee1af-2aea-4088-9e82-fb784c244e2c/resourceGroups/')[1].split('/providers/Microsoft.')[0]}]  }}"
       with_items: "{{ resources }}"
       # Get the Networking Configuration with supporting api_version= 2023-09-01
     - name: Fetch Each Networking Configuration for Each Resource Group
       azure_rm_resource_info: 
              resource_group: "{{ item.RG }}"
              provider: "{{ item.Type.split('Microsoft.')[1].split('/')[0] }}"
              resource_type: "{{ item.Type.split('Microsoft.')[1].split('/')[1] }}"
              resource_name: "{{ item.Name }}"
              api_version: 2023-09-01
              client_id: "{{ client_id }}"
              secret: "{{ secret }}"
              subscription_id: "{{ subscription }}"
              tenant: "{{ tenant }}"
       with_items: "{{ res_dict }}"
       when: 
          - item.Type.split('Microsoft.')[1].split('/')[0] == 'Network'
          - item.Type.split('Microsoft.Network/')[1] != 'frontdoorWebApplicationFirewallPolicies'   
       register: config_network
    # Clean the Network Config file and restructure the data
     - name: Clean Network Configuration for Skipped values
       set_fact:
           config_network_mod: "{{ item.response }}"
       when: item.skipped is undefined
       with_items: "{{ config_network.results }}"
     # Fetch the Compute Configuration supporting api_version: 2024-03-01
     - name: Fetch Compute Configuration for Each Resource Group 
       azure.azcollection.azure_rm_resource_info:
               url: https://management.azure.com{{item.Id}}?api-version=2024-03-01
               client_id: "{{ client_id }}"
               secret: "{{ secret }}"
               subscription_id: "{{ subscription }}"
               tenant: "{{ tenant }}"
       when: 
          - item.Type.split('Microsoft.')[1].split('/')[0] == 'Compute'
          - item.Type.split('Microsoft.Compute/')[1] != 'disks'
       with_items: "{{ res_dict }}"
       register: config_compute
     # Clean the Compute data and restructure it
     - name: Clean Compute Configuration for Skipped Values
       set_fact:
            config_compute_mod: "{{ item.response }}"
       when: item.skipped is undefined
       with_items: "{{ config_compute.results }}"
     # Fetch the Compute Disk Information
     - name: Fetch Disk Configuration for each Resource Group
       azure.azcollection.azure_rm_resource_info:
            url: https://management.azure.com{{item.Id}}?api-version=2023-10-02
            client_id: "{{ client_id }}"
            secret: "{{ secret }}"
            subscription_id: "{{ subscription }}"
            tenant: "{{ tenant }}"
       when:
            - item.Type.split('Microsoft.')[1].split('/')[0] == 'Compute'
            - item.Type.split('Microsoft.Compute/')[1] == 'disks'
       with_items: "{{ res_dict }}"
       register: config_disks
     # Clean the Disk data and restructre it
     - name: Clean Compute Disk Configuration for Skipped Values
       set_fact: 
           config_disks_mod: "{{ item.response }}"
       when: item.skipped is undefined
       with_items: "{{ config_disks.results }}"
    #  Fetch the WAF Frontdoor firewall Policies in the environment
     - name: Fetch the WAF FrontDoor Policies
       azure.azcollection.azure_rm_resource_info:
          url: https://management.azure.com{{item.Id}}?api-version=2022-05-01
          client_id: "{{ client_id }}"
          secret: "{{ secret }}"
          subscription_id: "{{ subscription }}"
          tenant: "{{ tenant }}"
       when:
          - item.Type.split('Microsoft.')[1].split('/')[0] == 'Network'
          - item.Type.split('Microsoft.Network/')[1] == 'frontdoorWebApplicationFirewallPolicies'
       with_items: "{{ res_dict }}"
       register: config_fd_policies
     # Clean Frontdoor Firewall policy data and restructure it.
     - name: Clean FrontDoor Firewall policy Configuration for Skipped Values
       set_fact: 
           config_fd_mod: "{{ item.response }}"
       when: item.skipped is undefined
       with_items: "{{ config_fd_policies.results }}"
     # Fetch Storage Account Information from All Resource Group
     - name: Fetch Storage Accounts Configuration for Each Resource Groups
       azure.azcollection.azure_rm_resource_info:
            url: https://management.azure.com{{item.Id}}?api-version=2023-01-01
            client_id: "{{ client_id }}"
            secret: "{{ secret }}"
            subscription_id: "{{ subscription }}"
            tenant: "{{ tenant }}"
       when:
          - item.Type.split('Microsoft.')[1].split('/')[0] == 'Storage'
       with_items: "{{ res_dict }}"
       register: config_storage
     # Clean Storage Account Config Data and restructure it.
     - name: Clean Storage Configuration for Skipped Values
       set_fact:
           config_storage_mod: "{{ item.response }}"
       when: item.skipped is undefined
       with_items: "{{ config_storage.results }}"
     # Print the modified data. later to be sent to the API service
     - name: Deisplay the final Configuration Values
       debug:
         msg: 
           - "{{ config_storage_mod }}"
           - "{{ config_disks_mod }}"
           - "{{ config_compute_mod }}"
           - "{{ config_network_mod }}"
           - "{{ config_fd_mod }}"

        
       

   
 
